{"name": "test_positive_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2b0e12f0096ee3997e131111a1d601c6\")>\n\n    def test_positive_login(browser):\n        \"\"\"\n        POC-1. Positive login\n        \"\"\"\n        browser.get(url=f'{Cfg.URL}/login')\n    \n        logger.info('Step 1. Wait for clickable email input, type email and password')\n        # ищем по селектору инпут \"Email\", кликаем по нему и вводим значение email\n        email = WebDriverWait(browser, timeout=10, poll_frequency=2).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, Locators.EMAIL)))\n        email.click()\n        email.send_keys(Cfg.VALID['email'])\n    \n        # ищем по селектору инпут \"Password\", кликаем по нему и вводим значение пароля\n        password = browser.find_element(by=By.CSS_SELECTOR, value=Locators.PASSWORD)\n        password.click()\n        password.send_keys(Cfg.VALID['password'])\n    \n        logger.info('Step 2. Press Enter to login')\n        # ищем по селектору кнопку \"Войти\" и кликаем по ней\n        enter = browser.find_element(by=By.CSS_SELECTOR, value=Locators.LOGIN)\n        enter.click()\n    \n        # ждем успешного входа и обновления страницы\n>       WebDriverWait(browser, timeout=10, poll_frequency=2).until(EC.url_to_be(f'{Cfg.URL}/'))\n\ntests\\test_pokemon_web.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2b0e12f0096ee3997e131111a1d601c6\")>\nmethod = <function url_to_be.<locals>._predicate at 0x0000020230F18400>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "description": "\n    POC-1. Positive login\n    ", "attachments": [{"name": "stderr", "source": "5e11f5b4-9308-467c-9f91-9633b20601e7-attachment.txt", "type": "text/plain"}], "start": 1752077487185, "stop": 1752077499854, "uuid": "327a001a-b2b9-4b76-9771-541376bbf4c2", "historyId": "107bb006c55b448e5a31302ee6843c86", "testCaseId": "107bb006c55b448e5a31302ee6843c86", "fullName": "tests.test_pokemon_web#test_positive_login", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_pokemon_web"}, {"name": "host", "value": "Yelena"}, {"name": "thread", "value": "16712-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_pokemon_web"}]}